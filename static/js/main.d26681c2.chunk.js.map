{"version":3,"sources":["utils/functions.js","Components/bote.js","Storage/storage.js","Components/board-box.jsx","Components/board.jsx","Components/scoreboard.jsx","App.js","serviceWorker.js","index.js"],"names":["findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","scores","X","O","tie","min","x","y","minimax","isMaximizing","human","ai","result","bestScore","Infinity","score","Storage","storageName","initialValue","this","localStorage","getItem","setItem","JSON","parse","data","stringify","Box","props","value","className","onClick","Board","storage","handleBoardRestart","setState","history","xIsNext","state","index","slice","utils","bestMoveIndex","move","bestMove","push","status","winner","isFilled","update","to","handleBoxClick","map","key","React","Component","Scoreboard","scoreboard","getData","class","leader","href","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d26681c2.chunk.js","sourcesContent":["export function findWinner(boxes) {\r\n    // Array with winning combinations\r\n    const rows = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n    // Iterate over array with winning combinations\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const [a, b, c] = rows[i]\r\n        // Check if the game board contains winning combination\r\n        if (boxes[a] != \" \" && boxes[a] == boxes[b] && boxes[a] == boxes[c]) {\r\n            // Return the winner ('x' or 'o')\r\n            return boxes[a]\r\n        }\r\n    }\r\n    if (areAllBoxesClicked(boxes)) {\r\n        return \"tie\";\r\n    }\r\n    // Otherwise do nothing\r\n    return null\r\n}\r\n\r\nexport function areAllBoxesClicked(boxes) {\r\n    // Declare variable to store number of clicked boxes.\r\n    let count = 0\r\n\r\n    // Iterate over all boxes\r\n    boxes.forEach(function (item) {\r\n        // Check if box is clicked (not null)\r\n        if (item !== \" \") {\r\n            // If yes, increase the value of count by 1\r\n            count++\r\n        }\r\n    })\r\n\r\n    // Check if all boxes are clicked (filled)\r\n    if (count === 9) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}","import { findWinner } from \"../utils/functions\";\r\n\r\nexport function bestMove(human, ai, boxes) {\r\n    // AI to make its turn\r\n    let bestScore = -Infinity;\r\n    let move;\r\n    for (let i = 0; i < 9; i++) {\r\n        // Is the spot available?\r\n        if (boxes[i] == \" \") {\r\n            boxes[i] = ai;\r\n            let score = minimax(boxes, false, human, ai);\r\n            boxes[i] = \" \";\r\n            if (score > bestScore) {\r\n                bestScore = score;\r\n                move = i;\r\n            }\r\n        }\r\n    }\r\n    return move;\r\n    //currentPlayer = human;\r\n}\r\n\r\nlet scores = {\r\n    X: -10,\r\n    O: 10,\r\n    tie: 0\r\n};\r\nfunction min(x, y) {\r\n    if (x < y) {\r\n        return x\r\n    } else {\r\n        return y;\r\n    }\r\n}\r\nfunction max(x, y) {\r\n    if (x > y) {\r\n        return x\r\n    } else {\r\n        return y;\r\n    }\r\n}\r\nfunction minimax(boxes, isMaximizing, human, ai) {\r\n    let result = findWinner(boxes);\r\n    if (result !== null) {\r\n        return scores[result];\r\n    }\r\n\r\n    if (isMaximizing) {\r\n        let bestScore = -Infinity;\r\n        for (let i = 0; i < 9; i++) {\r\n            // Is the spot available?\r\n            if (boxes[i] == \" \") {\r\n                boxes[i] = ai;\r\n                let score = minimax(boxes, false, human, ai);\r\n                boxes[i] = \" \";\r\n                bestScore = max(score, bestScore);\r\n            }\r\n        }\r\n        return bestScore;\r\n    } else {\r\n        let bestScore = Infinity;\r\n        for (let i = 0; i < 9; i++) {\r\n            // Is the spot available?\r\n            if (boxes[i] == \" \") {\r\n                boxes[i] = human;\r\n                let score = minimax(boxes, true, human, ai);\r\n                boxes[i] = \" \";\r\n                bestScore = min(score, bestScore);\r\n            }\r\n        }\r\n        return bestScore;\r\n    }\r\n}\r\n","export class Storage {\r\n    constructor(storageName = 'gameScoreboard', initialValue = '[]') {\r\n        this.storageName = storageName\r\n\r\n        // Check if localStorage contains any data from previous games\r\n        if (!localStorage.getItem(storageName)) {\r\n            // If not, create new item for our Tic Tac Toe game\r\n            localStorage.setItem(storageName, initialValue)\r\n        }\r\n    }\r\n\r\n    // Load data from previous games from localStorage\r\n    getData() {\r\n        return JSON.parse(localStorage.getItem(this.storageName))\r\n    }\r\n\r\n    // Update data in localStorage\r\n    update(data) {\r\n        localStorage.setItem(this.storageName, JSON.stringify(data))\r\n    }\r\n}","import React from \"react\";\r\n\r\n// Create Box component\r\nexport const Box = props => {\r\n  return (\r\n    <button value={props.value} className=\"board__box\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { bestMove } from \"./bote\";\r\n\r\n// Import Storage object\r\n\r\nimport { Storage } from \"../Storage/storage\";\r\n// Import Box component\r\nimport { Box } from \"./board-box\";\r\n\r\n// Import utility functions\r\nimport * as utils from \"../utils/functions\";\r\n\r\n// Create Board component\r\nexport class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initialize component state\r\n    this.state = {\r\n      boxes: [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      history: [],\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  // Create instance of Storage object\r\n  storage = new Storage();\r\n\r\n  // Handle click on boxes on the board.\r\n  handleBoxClick(index) {\r\n    // get current state of boxes\r\n    const boxes = this.state.boxes.slice();\r\n\r\n    // Get current state of history\r\n    let history = this.state.history;\r\n\r\n    // Stop the game if board contains winning combination\r\n    if (utils.findWinner(boxes) || boxes[index] != \" \") {\r\n      return;\r\n    }\r\n\r\n    // // Stop the game if all boxes are clicked (filled)\r\n    if (utils.areAllBoxesClicked(boxes) === true) {\r\n      return;\r\n    }\r\n\r\n    // Mark the box either as 'x' or 'o'\r\n    //boxes[index] = this.state.xIsNext ? \"x\" : \"o\";\r\n    boxes[index] = \"X\";\r\n    let bestMoveIndex = bestMove(\"X\", \"O\", boxes);\r\n    boxes[bestMoveIndex] = \"O\";\r\n    // Add move to game history\r\n    history.push(this.state.xIsNext ? \"x\" : \"o\");\r\n\r\n    // Update component state with new data\r\n    this.setState({\r\n      boxes: boxes,\r\n      history: history\r\n    });\r\n  }\r\n\r\n  // Handle board restart - set component state to initial state\r\n  handleBoardRestart = () => {\r\n    this.setState({\r\n      boxes: [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n      history: [],\r\n      xIsNext: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // Get winner (if there is any)\r\n    const winner = utils.findWinner(this.state.boxes);\r\n\r\n    // Are all boxes checked?\r\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes);\r\n\r\n    // Status message\r\n    let status;\r\n\r\n    if (winner) {\r\n      // If winner exists, create status message\r\n      status = `The winner is: ${winner}!`;\r\n\r\n      // Push data about the game to storage\r\n      this.storage.update([`${winner} won`]);\r\n    } else if (!winner && isFilled) {\r\n      // If game is drawn, create status message\r\n      status = \"Game drawn!\";\r\n\r\n      // Push data about the game to storage\r\n      this.storage.update([\"Game drawn\"]);\r\n    } else {\r\n      // If there is no winner and game is not drawn, ask the next player to make a move\r\n      status = `It is ${this.state.xIsNext ? \"x\" : \"o\"}'s turn.`;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {/* The game board */}\r\n        <div className=\"board-wrapper\">\r\n          <div className=\"board\">\r\n            {/* Link to scoreboard */}\r\n            <Link to=\"/\" className=\"btn\">\r\n              Go back to scoreboard\r\n            </Link>\r\n            <button className=\"btn\" onClick={this.handleBoardRestart}>\r\n              Start new game\r\n            </button>\r\n            <h2 className=\"board-heading\">{status}</h2>\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[0]}\r\n                onClick={() => this.handleBoxClick(0)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[1]}\r\n                onClick={() => this.handleBoxClick(1)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[2]}\r\n                onClick={() => this.handleBoxClick(2)}\r\n              />\r\n            </div>\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[3]}\r\n                onClick={() => this.handleBoxClick(3)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[4]}\r\n                onClick={() => this.handleBoxClick(4)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[5]}\r\n                onClick={() => this.handleBoxClick(5)}\r\n              />\r\n            </div>\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[6]}\r\n                onClick={() => this.handleBoxClick(6)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[7]}\r\n                onClick={() => this.handleBoxClick(7)}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[8]}\r\n                onClick={() => this.handleBoxClick(8)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-history\">\r\n            <h2 className=\"board-heading\">Moves history:</h2>\r\n\r\n            {/* List with history of moves */}\r\n            <ul className=\"board-historyList\">\r\n              {this.state.history.length === 0 && (\r\n                <span>No moves to show.</span>\r\n              )}\r\n\r\n              {this.state.history.length !== 0 &&\r\n                this.state.history.map((move, index) => {\r\n                  return (\r\n                    <li key={index}>\r\n                      Move {index + 1}: <strong>{move}</strong>\r\n                    </li>\r\n                  );\r\n                })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Storage } from \"../Storage/storage\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport class Scoreboard extends React.Component {\r\n  state = {\r\n    scoreboard: []\r\n  };\r\n\r\n  // After component mounts, load any data from local storage and update component state\r\n  async componentDidMount() {\r\n    let storage = await new Storage().getData();\r\n\r\n    this.setState({\r\n      scoreboard: storage\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        {/* List with previous games */}\r\n        <div class=\"card text-white bg-warning mb-3\">\r\n          <div class=\"card-header\">\r\n            <p>\r\n              <i>Tic Tac Toe</i>\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Recent games:</h5>\r\n            <h6 class=\"card-text\">\r\n              {this.state.scoreboard.map((leader, key) => {\r\n                return <li key={key}>{leader}</li>;\r\n              })}\r\n            </h6>\r\n            {/* Link to start new game */}\r\n            <a href=\"/board\" class=\"btn btn-primary\">\r\n              New Game\r\n            </a>\r\n          </div>\r\n          <div class=\"card-footer\">\r\n            <i>Created By Armen Balikyan </i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { Board } from './Components/board';\nimport { Scoreboard } from './Components/scoreboard';\nimport './Style/board.css'\nimport './Style/box.css'\nimport './Style/buttons.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route exact path=\"/\" component={Scoreboard} />\n        <Route path=\"/board\" component={Board} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}